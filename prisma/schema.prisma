generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum RoleUser {
  ADMIN
  MEMBER
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  username      String   @unique
  passwordHash  String
  name          String?
  role          RoleUser
  avatarUrl     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  memberships   WorkspaceMember[]
  tasksCreated  Task[]   @relation("TasksCreated")
  tasksUpdated  Task[]   @relation("TasksUpdated")
  taskAssignees TaskAssignee[]
  comments      Comment[]
  workspacesCreated Workspace[]
  activities   ActivityLog[]
}

model Workspace {
  id          String            @id @default(cuid())
  name        String
  slug        String            @unique
  iconKey     String?
  description String?
  createdById String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  createdBy   User              @relation(fields: [createdById], references: [id])
  members     WorkspaceMember[]
  projects    Project[]
  activities  ActivityLog[]
}

model WorkspaceMember {
  id           String    @id @default(cuid())
  workspaceId  String
  userId       String
  role         Role
  createdAt    DateTime  @default(now())

  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  user         User      @relation(fields: [userId], references: [id])

  @@unique([workspaceId, userId])
}

enum Role {
  ADMIN
  MEMBER
  VIEWER
}

model Project {
  id           String    @id @default(cuid())
  workspaceId  String
  name         String
  key          String?
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  boards       Board[]
  tasks        Task[]
  labels       Label[]
}

model Board {
  id         String   @id @default(cuid())
  projectId  String
  name       String
  slug       String?
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())

  project    Project  @relation(fields: [projectId], references: [id])
  columns    Column[]
  tasks      Task[]
}

model Column {
  id         String   @id @default(cuid())
  boardId    String
  title      String
  accent     String?
  wipLimit   Int?
  position   Decimal  @db.Decimal(20, 10)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  board      Board    @relation(fields: [boardId], references: [id])
  tasks      Task[]

  @@index([boardId, position])
}

model Task {
  id          String    @id @default(cuid())
  projectId   String
  boardId     String
  columnId    String
  title       String
  description String?
  priority    String?
  progress    Int?      // 0 - 100
  dueDate     DateTime?
  startDate   DateTime?
  position    Decimal   @db.Decimal(20, 10)
  createdById String
  updatedById String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  project     Project   @relation(fields: [projectId], references: [id])
  board       Board     @relation(fields: [boardId], references: [id])
  column      Column    @relation(fields: [columnId], references: [id])
  createdBy   User      @relation("TasksCreated", fields: [createdById], references: [id])
  updatedBy   User?     @relation("TasksUpdated", fields: [updatedById], references: [id])
  assignees   TaskAssignee[]
  labels      TaskLabel[]
  comments    Comment[]
  checklists  Checklist[]
  attachments Attachment[]

  @@index([projectId])
  @@index([boardId])
  @@index([columnId, position])
}

model Checklist {
  id        String   @id @default(cuid())
  taskId    String
  title     String
  createdAt DateTime @default(now())

  task      Task     @relation(fields: [taskId], references: [id])
  items     ChecklistItem[]
}

model ChecklistItem {
  id          String   @id @default(cuid())
  checklistId String
  title       String
  done        Boolean  @default(false)
  createdAt   DateTime @default(now())

  checklist   Checklist @relation(fields: [checklistId], references: [id])
}

model Attachment {
  id        String   @id @default(cuid())
  taskId    String
  name      String
  type      String?
  url       String
  createdAt DateTime @default(now())

  task      Task     @relation(fields: [taskId], references: [id])
}

model TaskAssignee {
  id      String @id @default(cuid())
  taskId  String
  userId  String

  task    Task   @relation(fields: [taskId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  @@unique([taskId, userId])
}

model Label {
  id         String   @id @default(cuid())
  projectId  String
  name       String
  color      String
  createdAt  DateTime @default(now())

  project    Project  @relation(fields: [projectId], references: [id])
  taskLabels TaskLabel[]
}

model TaskLabel {
  id       String @id @default(cuid())
  taskId   String
  labelId  String

  task     Task   @relation(fields: [taskId], references: [id])
  label    Label  @relation(fields: [labelId], references: [id])

  @@unique([taskId, labelId])
}

model Comment {
  id        String   @id @default(cuid())
  taskId    String
  authorId  String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task      Task     @relation(fields: [taskId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])
}

model ActivityLog {
  id           String   @id @default(cuid())
  workspaceId  String
  actorId      String
  action       String
  targetType   String
  targetId     String
  payload      Json?
  createdAt    DateTime @default(now())

  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  actor        User      @relation(fields: [actorId], references: [id])
}
